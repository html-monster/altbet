@model AltBet.Exchange.OrderOrPosition
@{
    var options = new AjaxOptions
    {
        Url = Url.Action("Cancel", "Order"),
        //OnBegin = "ajaxControllerClass.OnBeginJs",
        //OnSuccess = "ajaxControllerClass.OnSuccessJs",
        //OnFailure = "ajaxControllerClass.OnFailureJs",
        //OnComplete = "OnCompleteJs",
    };
}
<div class="order_container not-sort" id="@string.Format("{0}__order", Model.ID)">
    <div class="order_info @(   Model.isMirror == 0 ?
                                Model.Side == AltBet.Exchange.Side.Buy ? "buy" : "sell" :
                                Model.Side == AltBet.Exchange.Side.Buy ? "sell" : "buy"
                                )">
        <div class="container">
            <strong class="title">Price <span class="price">@(  Model.isMirror == 0 ? 
                                                                Math.Round(Model.Price, 2) :
                                                                Math.Round(1 - Model.Price, 2))</span></strong>
            <strong class="title">Quantity <span class="volume">@Model.Volume</span></strong>
            <strong class="timestamp"><span class="date">@Model.Time.ToShortDateString()</span> | <span class="time">@Model.Time.ToString("HH:mm")</span></strong>
            <div class="button_container">
                <button class="edit" title="edit or change the order"></button>
                <button class="delete"></button>
            </div>
        </div>
        <div class="pop_up">
            <div class="confirmation">
                @using (Ajax.BeginForm("Cancel", "Order", options))
                {
                    @Html.Hidden("id", Model.ID)
                    <button class="yes btn">Delete</button>
                }
                <button class="no btn">No</button>
            </div>
        </div>
    </div>
    @Html.Partial("_OrderSidebar/_CurrentOrders/_CurrentOrderForm", new AltBet.Bet.Models.EditOrderViewModel {
                                                                                            ID = Model.ID,
                                                                                            isMirror = Model.isMirror.ToString(),
                                                                                            Symbol = Model.Symbol.ToString(),
                                                                                            Side = Model.isMirror == 0 ? (Model.Side == AltBet.Exchange.Side.Buy ? "Buy" : "Sell") : (Model.Side == AltBet.Exchange.Side.Buy ? "Sell" : "Buy"),
                                                                                            LimitPrice = Model.isMirror == 0 ? Math.Round(Model.Price, 2) : Math.Round(1 - Model.Price, 2),
                                                                                            Quantity = (int)Model.Volume,
                                                                                            OrderType = true
                                                                                            })
</div>
