@using AltBet.Exchange
@model AltBet.Exchange.AllSymbolsAndOrders

<div class="content_bet @(User.Identity.IsAuthenticated ? ((bool)Session["Mode"] == true ? "basic_mode_js" : "") : "basic_mode_js") categoryFilterJs" id="@Model.Symbol.Exchange" style="display: none">
    @Html.HiddenFor(m => m.Symbol.Status)
    <div class="event_info @Model.CategoryIcon">
        <span class="date">
            @(Model.Symbol.StartDate != null ? Model.Symbol.StartDate.Value.ToString("d MMM yyyy") : Model.Symbol.EndDate.Value.ToShortDateString())   
@*            <span class="help_message"><span>MM/DD/YYYY</span></span>*@
        </span>
        @if (Model.Symbol.Status == StatusEvent.Completed)
        {
            <i class="half_time">ht<span>@Model.Symbol.Status</span></i>
        }
    </div>
    <div class="content_title command">
        <div class="inner">
            <h2>@Model.Symbol.HomeName @if (@Model.Symbol.HomePoints != null) {<span>(@Model.Symbol.HomePoints)</span>}</h2>
            <div class="vs">vs.</div>
            <h2>@Model.Symbol.AwayName @if (@Model.Symbol.AwayPoints != null) {<span>(@Model.Symbol.AwayPoints)</span>}</h2>
        </div>
        <span class="symbol_name hidden">@Model.Symbol.ToString()</span>
        <div class="event_info_bottom">
            <span title="Event status">@Model.Symbol.StatusEvent</span>
        </div>
    </div>
    <div class="table not-sort wave" id="exchange_table">
        <div class="event-content" data-symbol="@Model.Symbol.ToString()">
            <h3 class="event-title">
                <span class="title">@Model.Symbol.HomeName</span>
                <span>@(Model.Symbol.HomeHandicap != null ? (Model.Symbol.HomeHandicap > 0 ? string.Format("+{0}", Model.Symbol.HomeHandicap) : string.Format("{0}", Model.Symbol.HomeHandicap)) : "")</span>
                @Html.RouteLink("see more", "EventPage", new { controller = "Event", action = "Index", category = Model.CategoryChain, exchange = Model.Symbol.UrlExchange, reflection = "0" })
            </h3>
            <div class="container">
                <div class="sell button-container">
                    @if (Model.Orders.Where(x => x.Side == AltBet.Exchange.Side.Buy && x.SummaryPositionPrice.Sum(y => y.Quantity) != 0).Any())
                    {
                        foreach (var spsItem in Model.Orders.Single(x => x.Side == AltBet.Exchange.Side.Buy).SummaryPositionPrice.Where(x => x.Quantity != 0).ToList())
                        {
                            <button class="event animated sell real not-sort">
                                <span class="price">@((Session["Mode"] != null) ? ((bool)Session["Mode"]) ? string.Format("${0}", spsItem.Price.ToString("0.00")) : spsItem.Price.ToString("0.00") : string.Format("${0}", spsItem.Price.ToString("0.00")))</span>
                                <span class="volume">@spsItem.Quantity</span>
                                <div class="symbolName" style="display: none">@Model.Symbol</div>
                            </button>
                        }
                    }
                    else
                    {
                        <button class="event animated empty sell real not-sort">
                            <span class="price empty">SELL</span>
                            <div class="symbolName" style="display: none">@Model.Symbol</div>
                        </button>
                    }
                </div>
                <div class="buy button-container">
                    @if (Model.Orders.Where(x => x.Side == AltBet.Exchange.Side.Sell && x.SummaryPositionPrice.Sum(y => y.Quantity) != 0).Any())
                    {
                        foreach (var spsItem in Model.Orders.Single(x => x.Side == AltBet.Exchange.Side.Sell).SummaryPositionPrice.Where(x => x.Quantity != 0).ToList())
                        {
                            <button class="event animated buy real not-sort">
                                <span class="price">@((Session["Mode"] != null) ? ((bool)Session["Mode"]) ? string.Format("${0}", spsItem.Price.ToString("0.00")) : spsItem.Price.ToString("0.00") : string.Format("${0}", spsItem.Price.ToString("0.00")))</span>
                                <span class="volume">@spsItem.Quantity</span>
                                <div class="symbolName" style="display: none">@Model.Symbol</div>
                            </button>
                        }
                    }
                    else
                    {
                        <button class="event animated empty buy real not-sort">
                            <span class="price empty">BUY</span>
                            <div class="symbolName" style="display: none">@Model.Symbol</div>
                        </button>
                    }
                </div>
                <div class="pl mode_info_js">
                    <strong>P/L: <span></span></strong>
                </div>
            </div>
        </div>
        <div class="event-content revers" data-symbol="@string.Format("{0}_mirror", @Model.Symbol.ToString())">
            <h3 class="event-title">
                <span class="title">@Model.Symbol.AwayName</span>
                <span>@(Model.Symbol.AwayHandicap != null ? (Model.Symbol.AwayHandicap > 0 ? string.Format("+{0}", Model.Symbol.AwayHandicap) : string.Format("{0}", Model.Symbol.AwayHandicap)) : "")</span>
                @Html.RouteLink("see more", "EventPage", new { controller = "Event", action = "Index", category = Model.CategoryChain, exchangename = Model.Symbol.UrlExchange, reflection = "1" })
            </h3>
            <div class="container">
                <div class="sell button-container">
                    @if (Model.Orders.Where(x => x.Side == AltBet.Exchange.Side.Sell && x.SummaryPositionPrice.Sum(y => y.Quantity) != 0).Any())
                    {
                        foreach (var spsItem in Model.Orders.Single(x => x.Side == AltBet.Exchange.Side.Sell).SummaryPositionPrice.Where(x => x.Quantity != 0).OrderByDescending(x => x.Price).ToList())
                        {
                            <button class="event animated sell mirror not-sort">
                                <span class="price">@((Session["Mode"] != null) ? ((bool)Session["Mode"]) ? string.Format("${0}", (1 - spsItem.Price).ToString("0.00")) : (1 - spsItem.Price).ToString("0.00") : string.Format("${0}", (1 - spsItem.Price).ToString("0.00")))</span>
                                <span class="volume">@spsItem.Quantity</span>
                                <div class="symbolName" style="display: none">@Model.Symbol</div>
                            </button>
                        }
                    }
                    else
                    {
                        <button class="event animated empty sell mirror not-sort">
                            <span class="price empty">BUY</span>
                            <div class="symbolName" style="display: none">@Model.Symbol</div>
                        </button>
                    }
                </div>
                <div class="buy button-container">
                    @if (Model.Orders.Where(x => x.Side == AltBet.Exchange.Side.Buy && x.SummaryPositionPrice.Sum(y => y.Quantity) != 0).Any())
                    {
                        foreach (var spsItem in Model.Orders.Single(x => x.Side == AltBet.Exchange.Side.Buy).SummaryPositionPrice.Where(x => x.Quantity != 0).OrderByDescending(x => x.Price).ToList())
                        {
                            <button class="event animated buy mirror not-sort">
                                <span class="price">@((Session["Mode"] != null) ? ((bool)Session["Mode"]) ? string.Format("${0}", (1 - spsItem.Price).ToString("0.00")) : (1 - spsItem.Price).ToString("0.00") : string.Format("${0}", (1 - spsItem.Price).ToString("0.00")))</span>
                                <span class="volume">@spsItem.Quantity</span>
                                <div class="symbolName" style="display: none">@Model.Symbol</div>
                            </button>
                        }
                    }
                    else
                    {
                        <button class="event animated empty buy mirror not-sort">
                            <span class="price empty">SELL</span>
                            <div class="symbolName" style="display: none">@Model.Symbol</div>
                        </button>
                    }
                </div>
                <div class="pos mode_info_js">
                    <strong>Pos: <span></span></strong>
                </div>
            </div>
        </div>
        <button class="show-schedule" title="Show chart"></button>
        <div class="schedule loader not-sort">
            <div id="@string.Format("container_{0}", Model.Symbol)"></div>
            <!--img src="~/Images/chart_white.svg" alt=""-->
        </div>
        <a href="#" class="add_favorite" title="Add to favorite"></a>
    </div>
</div>