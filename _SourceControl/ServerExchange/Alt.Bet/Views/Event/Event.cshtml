﻿@using AltBet.Exchange
@model AltBet.Bet.Models.EventViewModel

@*<ul class="breadcrumbs">
        <li><a href="#">Sport</a></li>
        <li><a href="#">Footbool</a></li>
        <li><a href="#">UK Premiership League</a></li>
        <li>@Model.SymbolsAndOrders.Symbol.FullName</li>
    </ul>*@
    
    <div class="wrapper_event_page" data-id="@Model.SymbolsAndOrders.Symbol.ToString()">
    <h1>
        @Html.RouteLink(Model.SymbolsAndOrders.Symbol.HomeName, "EventPage", new { controller = "Event", action = "Index", category = Model.SymbolsAndOrders.CategoryChain, exchange = Model.SymbolsAndOrders.Symbol.UrlExchange, reflection = "0" }, new { @class = "event" })
        <span class="lower"> vs </span>
        @Html.RouteLink(Model.SymbolsAndOrders.Symbol.AwayName, "EventPage", new { controller = "Event", action = "Index", category = Model.SymbolsAndOrders.CategoryChain, exchange = Model.SymbolsAndOrders.Symbol.UrlExchange, reflection = "1" }, new { @class = "event" }) 
    </h1>
        <div class="container">
            <div class="chart_container" @*id="DiEventPage"*@>
                <div>
                    <h2>@Model.IsMirrorName</h2>
                    <label class="chk-chart-type checkbox checkbox_horizontal green-brown label-left">
                        <input name="IsMode" type="checkbox" value="true">
                        <span class="label"><b>Line</b>/<i>Area</i></span>
                        <span></span>
                    </label>
                    @Html.HiddenFor(model => model.IsMirror)
                    <div class="chart">
                        <div id="@string.Format("eventContainer_{0}", Model.SymbolsAndOrders.Symbol)" class=""></div>
                        <!--img src="~/Images/graf.jpg" alt=""-->
                    </div>                    
                </div>
            </div>
            <div class="event_info">
                <div class="current_price">
                    <div class="wrapper">
                        <h2>@Model.IsMirrorName</h2>
                        <div class="current_price">
                            <span class="title">Last Price:</span>
                            <span class="value">@string.Format("{0:0.0#}", Model.SymbolsAndOrders.Symbol.LastPrice)</span>
                            <br />
                            <span class="title">Event status: </span>
                            <span class="value">@Model.SymbolsAndOrders.Symbol.StatusEvent</span>
                        </div>
                    </div>
                    <div class="price_scope">
                        <div class="high container">
                            <span class="title">High</span>
                            <span class="current">@*@string.Format("{0:0.0#}",Model.SymbolsAndOrders.Symbol.LastBid)*@</span>
                        </div>
                        <div class="low container">
                            <span class="title">Low</span>
                            <span class="current">@*@string.Format("{0:0.0#}", Model.SymbolsAndOrders.Symbol.LastAsk)*@</span>
                        </div>
                    </div>
                </div>
                <div class="specification">
                    <h2>Specifications</h2>
                    <table class="specification_table">
                        @*<tr>
                            <td><strong>Symbol:</strong></td>
                            <td><span>@Model.IsMirrorName</span></td>
                        </tr>
                        <tr>
                            <td><strong>Start:</strong></td>
                            <td><span>@Model.SymbolsAndOrders.Symbol.StartDate</span></td>
                        </tr>
                        <tr>
                            <td><strong>End:</strong></td>
                            <td><span>---</span></td>
                        </tr>
                        <tr>
                            <td><strong>Strike price:</strong></td>
                            <td><span>UAH 30 ???</span></td>
                        </tr>*@
                        <tr>
                            <td><strong>Trade volume:</strong></td>
                            <td><span>7/006</span></td>
                        </tr>
                        <tr>
                            <td><strong>Volume today:</strong></td>
                            <td>
                                <span>@Model.SumVolume</span>
                            </td>
                        </tr>
                        <tr>
                            <td><strong>All positions:</strong></td>
                            <td><span>3.717</span></td>
                        </tr>
                    </table>
                </div>
                <div class="ord_crt_cont event-content" data-symbol="@Model.SymbolsAndOrders.Symbol.ToString()">
                    <button class="btn buy price event">Buy</button>
                    <button class="btn sell price event">Sell</button>
                </div>
            </div>
        </div>
        <div id="mainController" class="executed">
            <div class="executed_orders sell order_create event-content" data-symbol="@Model.SymbolsAndOrders.Symbol.ToString()">
                <table>
                    <thead>
                        <tr>
                            <th><span>Bid</span></th>
                            <th><span>Quantity</span></th>
                        </tr>
                    </thead>
                    <tbody>
                        @*@if (Model.OrderResponse.ActiveOrders != null && (Model.OrderResponse.ActiveOrders).Any(x => x.Side == Side.Buy))
                    {
                        foreach (var item in Model.OrderResponse.ActiveOrders.Single(x => x.Side == Side.Buy).SummaryPositionPrice.OrderByDescending(x => x.Price).ToList())
                        {
                            <tr>
                                <td class="clickable price buy"><span>$@string.Format("{0:0.00#}", item.Price)</span></td>
                                <td class="clickable volume buy">
                                    <span>@item.Quantity</span>
                                </td>
                            </tr>
                        }
                    }*@
                    </tbody>
                </table>
            </div>
            <div class="executed_orders buy order_create event-content" data-symbol="@Model.SymbolsAndOrders.Symbol.ToString()">
                <table>
                    <thead>
                        <tr>
                            <th><span>Ask</span></th>
                            <th><span>Quantity</span></th>
                        </tr>
                    </thead>
                    <tbody>
                        @*@if (Model.OrderResponse.ActiveOrders != null && (Model.OrderResponse.ActiveOrders).Any(x => x.Side == Side.Sell))
                    {
                        foreach (var item in Model.OrderResponse.ActiveOrders.Single(x => x.Side == Side.Sell).SummaryPositionPrice.OrderBy(x => x.Price).ToList())
                        {
                            <tr>
                                <td class="clickable price sell"><span>$@string.Format("{0:0.00#}", item.Price)</span></td>
                                <td class="clickable volume sell"><span>@item.Quantity</span></td>
                            </tr>
                        }
                    }*@
                    </tbody>
                </table>
            </div>
            <div class="executed_orders">
                <table>
                    <thead>
                        <tr>
                            <th><span>Time & Sales</span></th>
                            <th></th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                    @*@if (Model.OrderResponse.Ticks != null)
                    {
                        foreach (var item in Model.OrderResponse.Ticks.OrderByDescending(t => t.Time).ToList())
                         {
                             <tr>
                                 <td><span>@item.Time.ToString("dd/MM/yyyy HH:mm:ss")</span></td>
                                 <td class="clickable price buy"><span>$@string.Format("{0:0.00#}", item.Price)</span></td>
                                 <td class="clickable volume buy"><span>@item.Volume</span></td>
                             </tr>
                         }
                    }*@
                    </tbody>
                </table>
            </div>
        </div>
@*
        <div class="comparison">
            <div class="table_wrap">
                <table class="comparison_table">
                    <thead>
                        <tr>
                            <th><strong>For comparison</strong></th>
                            <th></th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td><span>Smarkets</span></td>
                            <td class="buy"><span>$0.61</span></td>
                            <td class="buy"><span>1.63</span></td>
                        </tr>
                        <tr>
                            <td><span>Betfair</span></td>
                            <td class="buy"><span>$0.59</span></td>
                            <td class="buy"><span>1.69</span></td>
                        </tr>
                    </tbody>
                </table>
            </div>
@*
            <div class="table_wrap">
                <table class="comparison_table">
                    <thead>
                        <tr>
                            <th><strong>For comparison</strong></th>
                            <th></th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td><span>Smarkets</span></td>
                            <td class="sell"><span>$0.69</span></td>
                            <td class="sell"><span>1.45</span></td>
                        </tr>
                        <tr>
                            <td><span>Betfair</span></td>
                            <td class="sell"><span>$0.63</span></td>
                            <td class="sell"><span>1.58</span></td>
                        </tr>
                    </tbody>
                </table>
            </div>

          <div class="table_wrap">
          </div>
        </div>

        <div class="information">
            <h2>General information on the courses NBU banks</h2>
            <p>
                Lorem ipsum dolor sit amet, consectetur adipisicing elit. A accusamus accusantium, amet animi aperiam
                aspernatur aut autem dicta dolorem ea earum eos ex fuga hic illum iste laborum modi nam necessitatibus nemo,
                nobis nostrum perspiciatis porro possimus quaerat repellat, tenetur vitae. Delectus hic ipsa minima numquam
                quod saepe sed voluptas. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Eveniet facere fuga ipsa
                quidem vel velit voluptas.
                Alias consequatur doloribus eos praesentium quasi reprehenderit voluptatum? Adipisci animi commodi distinctio
                ducimus earum eius quasi qui veritatis vero, voluptates. Aliquam aperiam consectetur, doloremque facilis
                libero maxime nemo odio sed. Assumenda omnis suscipit ut.
            </p>
        </div>
*@
    </div>

    <script>
        globalData.eventPageOn = true;
        appData.pageEventData = JSON.parse('@Html.Raw(Json.Encode(Model))');

        @*for chart*@
        appData.pageEventData.chartId = JSON.parse('@Html.Raw(Json.Encode(string.Format("{0}", Model.SymbolsAndOrders.Symbol)))');

        @* for mirror link *@
        appData.pageEventData.exchangeLink = $('<textarea />').html("@Url.Action("Index", "Event", new { category = Model.SymbolsAndOrders.CategoryChain, exchange = Model.SymbolsAndOrders.Symbol.UrlExchange })").text();
        appData.pageEventData.fsideLink = $('<textarea />').html("@Url.Action("Index", "Event", new { category = Model.SymbolsAndOrders.CategoryChain, exchange = Model.SymbolsAndOrders.Symbol.UrlExchange, reflection = "0" })").text();
        appData.pageEventData.mirrorLink = $('<textarea />').html("@Url.Action("Index", "Event", new { category = Model.SymbolsAndOrders.CategoryChain, exchange = Model.SymbolsAndOrders.Symbol.UrlExchange, reflection = "1" })").text();
    </script>
