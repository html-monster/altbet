@using AltBet.Exchange
@using AltBet.Bet.Models
@model MenuViewModel


@BuildMenuHelper(Model.Menu, Guid.Empty, 0)

@helper BuildMenuHelper(List<CategoryItem> items, Guid parentId, int count)
{

    var menu = items.Where(x => x.CatParentId == parentId).OrderBy(n => n.CatPosition).ThenBy(c => c.CatName).ToList();

    if (menu.Any(n => n.CatParentId == parentId))
    {
        if (menu.Any(n => n.CatParentId != Guid.Empty))
        {
            <ul class="@(menu.Any(n => n.CatParentId != Guid.Empty) ? "lv" + count++ :"")">
                @foreach (var item in menu.Where(n => n.CatParentId == parentId))
                {
                    <li>
                        <span><a href="#" class="favorite" title="favorite"></a>@item.CatName<a href="@Url.RouteUrl("Categories", new {controller = "Home", action = "Index", path = item.CatUrlChain})" id="@item.CatId" class="jump" title="View events in this level"></a></span>
                        @BuildMenuHelper(items, item.CatId, count)
                    </li>
                }
            </ul>
        }
        else
        {
            foreach (var item in menu.Where(n => n.CatParentId == parentId))
            {
                <li class="@item.CatIcon main">
                    <span>@item.CatName<a href="@Url.RouteUrl("Categories", new {controller = "Home", action = "Index", path = item.CatUrlChain})" id="@item.CatId" class="jump" title="View events in this level"></a></span>
                    @BuildMenuHelper(items, item.CatId, count)
                </li>
            }
        }

    }
    else
    {
        <ul class="lv-last">
            @foreach (var exchange in @Model.Exchanges.Where(d => d.CategoryId == parentId).ToList())
            {
                <li>
                    <a href="#" class="favorite"></a>
                    @Html.RouteLink(exchange.FullName.Replace("_vs_", " – "), "EventPage", new { controller = "Event", action = "Index", exchangename = exchange.ExchangeUrl, reflection = "0" }, new { @parentid = parentId, @class = "event" })
                </li>
            }
        </ul>
    }
}


@*<li class="menu_marker"></li>*@
<script>
    appData.menuData = JSON.parse('@Html.Raw(Json.Encode(Model))');
</script>







@*@foreach (var menu in Model.Menu)
    {
        <li class="@menu.Icon main">
            <span>@menu.Name<a href="@Url.RouteUrl("Categories", new { controller = "Home", action = "Index", path = menu.UrlChain })" id="@menu.Id" class="jump" title="View events in this level"></a></span>
            <ul class="sub-menu_1">
                @foreach (var submenu in menu.SubItems)
                {
                    <li>
                        <span><a href="#" class="favorite" title="favorite"></a>@submenu.Name<a href="@Url.RouteUrl("Categories", new { controller = "Home", action = "Index", path = submenu.UrlChain })" id="@submenu.Id" class=" jump" title="View events in this level"></a></span>
                        <ul class="sub-menu_2">
                            @foreach (var submenu2 in submenu.SubItems)
                            {
                                <li>
                                    <span><a href="#" class="favorite" title="favorite"></a>@submenu2.Name<a href="@Url.RouteUrl("Categories", new { controller = "Home", action = "Index", path = submenu2.UrlChain })" id="@submenu2.Id" class="jump" title="View events in this level"></a></span>
                                    <ul class="sub-menu_3">
                                        @foreach (var submenu3 in @Model.Exchanges.Where(d => d.CategoryId == submenu2.Id).ToList())
                                        {
                                            <li>
                                                <a href="#" class="favorite"></a>
                                                @Html.RouteLink(submenu3.FullName.Replace("_vs_", " – "), "EventPage", new { controller = "Event", action = "Index", path = submenu3.CategoryUrl, exchangename = submenu3.ExchangeUrl, reflection = "0" }, new { parentid = submenu2.Id, @class = "event" })
                                            </li>
                                        }
                                    </ul>
                                </li>
                            }
                        </ul>
                    </li>
                }
            </ul>
        </li>
    }*@



