//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AltBet.UserServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserServiceReference.IUserManager")]
    public interface IUserManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/Register", ReplyAction="http://tempuri.org/IUserManager/RegisterResponse")]
        AltBet.ExchangeServices.Services.Registration Register(AltBet.Model.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/Register", ReplyAction="http://tempuri.org/IUserManager/RegisterResponse")]
        System.Threading.Tasks.Task<AltBet.ExchangeServices.Services.Registration> RegisterAsync(AltBet.Model.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GenerateNewConfirmationHash", ReplyAction="http://tempuri.org/IUserManager/GenerateNewConfirmationHashResponse")]
        AltBet.Exchange.UserNewHashCodeResponse GenerateNewConfirmationHash(string userName, string confirmationCode, bool trustedUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GenerateNewConfirmationHash", ReplyAction="http://tempuri.org/IUserManager/GenerateNewConfirmationHashResponse")]
        System.Threading.Tasks.Task<AltBet.Exchange.UserNewHashCodeResponse> GenerateNewConfirmationHashAsync(string userName, string confirmationCode, bool trustedUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/Login", ReplyAction="http://tempuri.org/IUserManager/LoginResponse")]
        AltBet.ExchangeServices.Services.Authorization Login(string userName, string password, string currentPage, string browser, string ip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/Login", ReplyAction="http://tempuri.org/IUserManager/LoginResponse")]
        System.Threading.Tasks.Task<AltBet.ExchangeServices.Services.Authorization> LoginAsync(string userName, string password, string currentPage, string browser, string ip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/Logout", ReplyAction="http://tempuri.org/IUserManager/LogoutResponse")]
        void Logout(string user, string browser, string ip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/Logout", ReplyAction="http://tempuri.org/IUserManager/LogoutResponse")]
        System.Threading.Tasks.Task LogoutAsync(string user, string browser, string ip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/Confirm", ReplyAction="http://tempuri.org/IUserManager/ConfirmResponse")]
        AltBet.Exchange.UserConfirmationResponse Confirm(string userName, string confirmationCode, bool trustedUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/Confirm", ReplyAction="http://tempuri.org/IUserManager/ConfirmResponse")]
        System.Threading.Tasks.Task<AltBet.Exchange.UserConfirmationResponse> ConfirmAsync(string userName, string confirmationCode, bool trustedUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GetUserInfo", ReplyAction="http://tempuri.org/IUserManager/GetUserInfoResponse")]
        AltBet.Exchange.User GetUserInfo(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GetUserInfo", ReplyAction="http://tempuri.org/IUserManager/GetUserInfoResponse")]
        System.Threading.Tasks.Task<AltBet.Exchange.User> GetUserInfoAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GetUserInfoByEmail", ReplyAction="http://tempuri.org/IUserManager/GetUserInfoByEmailResponse")]
        AltBet.Exchange.User GetUserInfoByEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GetUserInfoByEmail", ReplyAction="http://tempuri.org/IUserManager/GetUserInfoByEmailResponse")]
        System.Threading.Tasks.Task<AltBet.Exchange.User> GetUserInfoByEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/EditUserInfo", ReplyAction="http://tempuri.org/IUserManager/EditUserInfoResponse")]
        string EditUserInfo(AltBet.Model.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/EditUserInfo", ReplyAction="http://tempuri.org/IUserManager/EditUserInfoResponse")]
        System.Threading.Tasks.Task<string> EditUserInfoAsync(AltBet.Model.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/EditPreferences", ReplyAction="http://tempuri.org/IUserManager/EditPreferencesResponse")]
        string EditPreferences(AltBet.Model.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/EditPreferences", ReplyAction="http://tempuri.org/IUserManager/EditPreferencesResponse")]
        System.Threading.Tasks.Task<string> EditPreferencesAsync(AltBet.Model.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/EditUserTheme", ReplyAction="http://tempuri.org/IUserManager/EditUserThemeResponse")]
        string EditUserTheme(string userName, string theme);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/EditUserTheme", ReplyAction="http://tempuri.org/IUserManager/EditUserThemeResponse")]
        System.Threading.Tasks.Task<string> EditUserThemeAsync(string userName, string theme);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/ChangePassword", ReplyAction="http://tempuri.org/IUserManager/ChangePasswordResponse")]
        AltBet.Exchange.ResultObj ChangePassword(string userName, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/ChangePassword", ReplyAction="http://tempuri.org/IUserManager/ChangePasswordResponse")]
        System.Threading.Tasks.Task<AltBet.Exchange.ResultObj> ChangePasswordAsync(string userName, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/LoginAdmin", ReplyAction="http://tempuri.org/IUserManager/LoginAdminResponse")]
        AltBet.ExchangeServices.Services.Authorization LoginAdmin(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/LoginAdmin", ReplyAction="http://tempuri.org/IUserManager/LoginAdminResponse")]
        System.Threading.Tasks.Task<AltBet.ExchangeServices.Services.Authorization> LoginAdminAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/LogoutAdmin", ReplyAction="http://tempuri.org/IUserManager/LogoutAdminResponse")]
        void LogoutAdmin(string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/LogoutAdmin", ReplyAction="http://tempuri.org/IUserManager/LogoutAdminResponse")]
        System.Threading.Tasks.Task LogoutAdminAsync(string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GetLocation", ReplyAction="http://tempuri.org/IUserManager/GetLocationResponse")]
        string GetLocation(string ip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GetLocation", ReplyAction="http://tempuri.org/IUserManager/GetLocationResponse")]
        System.Threading.Tasks.Task<string> GetLocationAsync(string ip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UnsubscribeMail", ReplyAction="http://tempuri.org/IUserManager/UnsubscribeMailResponse")]
        void UnsubscribeMail(string name, string type, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UnsubscribeMail", ReplyAction="http://tempuri.org/IUserManager/UnsubscribeMailResponse")]
        System.Threading.Tasks.Task UnsubscribeMailAsync(string name, string type, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/PushSubscribe", ReplyAction="http://tempuri.org/IUserManager/PushSubscribeResponse")]
        void PushSubscribe(AltBet.Exchange.PushSettings model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/PushSubscribe", ReplyAction="http://tempuri.org/IUserManager/PushSubscribeResponse")]
        System.Threading.Tasks.Task PushSubscribeAsync(AltBet.Exchange.PushSettings model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GidxCreateSession", ReplyAction="http://tempuri.org/IUserManager/GidxCreateSessionResponse")]
        GIDX.SDK.Models.WebReg.CreateSessionResponse GidxCreateSession(string user, string ip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GidxCreateSession", ReplyAction="http://tempuri.org/IUserManager/GidxCreateSessionResponse")]
        System.Threading.Tasks.Task<GIDX.SDK.Models.WebReg.CreateSessionResponse> GidxCreateSessionAsync(string user, string ip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GidxCreateWebCashier", ReplyAction="http://tempuri.org/IUserManager/GidxCreateWebCashierResponse")]
        GIDX.SDK.Models.WebCashier.CreateSessionResponse GidxCreateWebCashier(string user, string ipAddr, GIDX.SDK.Models.WebCashier.PayActionCode payCode, System.Nullable<decimal> amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GidxCreateWebCashier", ReplyAction="http://tempuri.org/IUserManager/GidxCreateWebCashierResponse")]
        System.Threading.Tasks.Task<GIDX.SDK.Models.WebCashier.CreateSessionResponse> GidxCreateWebCashierAsync(string user, string ipAddr, GIDX.SDK.Models.WebCashier.PayActionCode payCode, System.Nullable<decimal> amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GidxCallbackResponse", ReplyAction="http://tempuri.org/IUserManager/GidxCallbackResponseResponse")]
        GIDX.SDK.Models.WebReg.SessionStatusCallbackResponse GidxCallbackResponse(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GidxCallbackResponse", ReplyAction="http://tempuri.org/IUserManager/GidxCallbackResponseResponse")]
        System.Threading.Tasks.Task<GIDX.SDK.Models.WebReg.SessionStatusCallbackResponse> GidxCallbackResponseAsync(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GidxCallbackWebCashier", ReplyAction="http://tempuri.org/IUserManager/GidxCallbackWebCashierResponse")]
        GIDX.SDK.Models.WebCashier.SessionStatusCallbackResponse GidxCallbackWebCashier(string callback);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GidxCallbackWebCashier", ReplyAction="http://tempuri.org/IUserManager/GidxCallbackWebCashierResponse")]
        System.Threading.Tasks.Task<GIDX.SDK.Models.WebCashier.SessionStatusCallbackResponse> GidxCallbackWebCashierAsync(string callback);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GidxGetSessionStatus", ReplyAction="http://tempuri.org/IUserManager/GidxGetSessionStatusResponse")]
        GIDX.SDK.Models.WebReg.RegistrationStatusResponse GidxGetSessionStatus(string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GidxGetSessionStatus", ReplyAction="http://tempuri.org/IUserManager/GidxGetSessionStatusResponse")]
        System.Threading.Tasks.Task<GIDX.SDK.Models.WebReg.RegistrationStatusResponse> GidxGetSessionStatusAsync(string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GidxNotification", ReplyAction="http://tempuri.org/IUserManager/GidxNotificationResponse")]
        bool GidxNotification(AltBet.Exchange.GidxNotification data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GidxNotification", ReplyAction="http://tempuri.org/IUserManager/GidxNotificationResponse")]
        System.Threading.Tasks.Task<bool> GidxNotificationAsync(AltBet.Exchange.GidxNotification data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GidxCustomerRegistration", ReplyAction="http://tempuri.org/IUserManager/GidxCustomerRegistrationResponse")]
        GIDX.SDK.Models.WebReg.CustomerRegistrationResponse GidxCustomerRegistration(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GidxCustomerRegistration", ReplyAction="http://tempuri.org/IUserManager/GidxCustomerRegistrationResponse")]
        System.Threading.Tasks.Task<GIDX.SDK.Models.WebReg.CustomerRegistrationResponse> GidxCustomerRegistrationAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GidxUploadDocument", ReplyAction="http://tempuri.org/IUserManager/GidxUploadDocumentResponse")]
        string GidxUploadDocument(string userName, string urlToFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GidxUploadDocument", ReplyAction="http://tempuri.org/IUserManager/GidxUploadDocumentResponse")]
        System.Threading.Tasks.Task<string> GidxUploadDocumentAsync(string userName, string urlToFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/IsUserVerified", ReplyAction="http://tempuri.org/IUserManager/IsUserVerifiedResponse")]
        bool IsUserVerified(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/IsUserVerified", ReplyAction="http://tempuri.org/IUserManager/IsUserVerifiedResponse")]
        System.Threading.Tasks.Task<bool> IsUserVerifiedAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GidxWebWallet", ReplyAction="http://tempuri.org/IUserManager/GidxWebWalletResponse")]
        GIDX.SDK.Models.WebCashier.CreateSessionWebWalletResponse GidxWebWallet(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GidxWebWallet", ReplyAction="http://tempuri.org/IUserManager/GidxWebWalletResponse")]
        System.Threading.Tasks.Task<GIDX.SDK.Models.WebCashier.CreateSessionWebWalletResponse> GidxWebWalletAsync(string userName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserManagerChannel : AltBet.UserServiceReference.IUserManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserManagerClient : System.ServiceModel.ClientBase<AltBet.UserServiceReference.IUserManager>, AltBet.UserServiceReference.IUserManager {
        
        public UserManagerClient() {
        }
        
        public UserManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public AltBet.ExchangeServices.Services.Registration Register(AltBet.Model.User user) {
            return base.Channel.Register(user);
        }
        
        public System.Threading.Tasks.Task<AltBet.ExchangeServices.Services.Registration> RegisterAsync(AltBet.Model.User user) {
            return base.Channel.RegisterAsync(user);
        }
        
        public AltBet.Exchange.UserNewHashCodeResponse GenerateNewConfirmationHash(string userName, string confirmationCode, bool trustedUser) {
            return base.Channel.GenerateNewConfirmationHash(userName, confirmationCode, trustedUser);
        }
        
        public System.Threading.Tasks.Task<AltBet.Exchange.UserNewHashCodeResponse> GenerateNewConfirmationHashAsync(string userName, string confirmationCode, bool trustedUser) {
            return base.Channel.GenerateNewConfirmationHashAsync(userName, confirmationCode, trustedUser);
        }
        
        public AltBet.ExchangeServices.Services.Authorization Login(string userName, string password, string currentPage, string browser, string ip) {
            return base.Channel.Login(userName, password, currentPage, browser, ip);
        }
        
        public System.Threading.Tasks.Task<AltBet.ExchangeServices.Services.Authorization> LoginAsync(string userName, string password, string currentPage, string browser, string ip) {
            return base.Channel.LoginAsync(userName, password, currentPage, browser, ip);
        }
        
        public void Logout(string user, string browser, string ip) {
            base.Channel.Logout(user, browser, ip);
        }
        
        public System.Threading.Tasks.Task LogoutAsync(string user, string browser, string ip) {
            return base.Channel.LogoutAsync(user, browser, ip);
        }
        
        public AltBet.Exchange.UserConfirmationResponse Confirm(string userName, string confirmationCode, bool trustedUser) {
            return base.Channel.Confirm(userName, confirmationCode, trustedUser);
        }
        
        public System.Threading.Tasks.Task<AltBet.Exchange.UserConfirmationResponse> ConfirmAsync(string userName, string confirmationCode, bool trustedUser) {
            return base.Channel.ConfirmAsync(userName, confirmationCode, trustedUser);
        }
        
        public AltBet.Exchange.User GetUserInfo(string userName) {
            return base.Channel.GetUserInfo(userName);
        }
        
        public System.Threading.Tasks.Task<AltBet.Exchange.User> GetUserInfoAsync(string userName) {
            return base.Channel.GetUserInfoAsync(userName);
        }
        
        public AltBet.Exchange.User GetUserInfoByEmail(string email) {
            return base.Channel.GetUserInfoByEmail(email);
        }
        
        public System.Threading.Tasks.Task<AltBet.Exchange.User> GetUserInfoByEmailAsync(string email) {
            return base.Channel.GetUserInfoByEmailAsync(email);
        }
        
        public string EditUserInfo(AltBet.Model.User user) {
            return base.Channel.EditUserInfo(user);
        }
        
        public System.Threading.Tasks.Task<string> EditUserInfoAsync(AltBet.Model.User user) {
            return base.Channel.EditUserInfoAsync(user);
        }
        
        public string EditPreferences(AltBet.Model.User user) {
            return base.Channel.EditPreferences(user);
        }
        
        public System.Threading.Tasks.Task<string> EditPreferencesAsync(AltBet.Model.User user) {
            return base.Channel.EditPreferencesAsync(user);
        }
        
        public string EditUserTheme(string userName, string theme) {
            return base.Channel.EditUserTheme(userName, theme);
        }
        
        public System.Threading.Tasks.Task<string> EditUserThemeAsync(string userName, string theme) {
            return base.Channel.EditUserThemeAsync(userName, theme);
        }
        
        public AltBet.Exchange.ResultObj ChangePassword(string userName, string oldPassword, string newPassword) {
            return base.Channel.ChangePassword(userName, oldPassword, newPassword);
        }
        
        public System.Threading.Tasks.Task<AltBet.Exchange.ResultObj> ChangePasswordAsync(string userName, string oldPassword, string newPassword) {
            return base.Channel.ChangePasswordAsync(userName, oldPassword, newPassword);
        }
        
        public AltBet.ExchangeServices.Services.Authorization LoginAdmin(string userName, string password) {
            return base.Channel.LoginAdmin(userName, password);
        }
        
        public System.Threading.Tasks.Task<AltBet.ExchangeServices.Services.Authorization> LoginAdminAsync(string userName, string password) {
            return base.Channel.LoginAdminAsync(userName, password);
        }
        
        public void LogoutAdmin(string user) {
            base.Channel.LogoutAdmin(user);
        }
        
        public System.Threading.Tasks.Task LogoutAdminAsync(string user) {
            return base.Channel.LogoutAdminAsync(user);
        }
        
        public string GetLocation(string ip) {
            return base.Channel.GetLocation(ip);
        }
        
        public System.Threading.Tasks.Task<string> GetLocationAsync(string ip) {
            return base.Channel.GetLocationAsync(ip);
        }
        
        public void UnsubscribeMail(string name, string type, string id) {
            base.Channel.UnsubscribeMail(name, type, id);
        }
        
        public System.Threading.Tasks.Task UnsubscribeMailAsync(string name, string type, string id) {
            return base.Channel.UnsubscribeMailAsync(name, type, id);
        }
        
        public void PushSubscribe(AltBet.Exchange.PushSettings model) {
            base.Channel.PushSubscribe(model);
        }
        
        public System.Threading.Tasks.Task PushSubscribeAsync(AltBet.Exchange.PushSettings model) {
            return base.Channel.PushSubscribeAsync(model);
        }
        
        public GIDX.SDK.Models.WebReg.CreateSessionResponse GidxCreateSession(string user, string ip) {
            return base.Channel.GidxCreateSession(user, ip);
        }
        
        public System.Threading.Tasks.Task<GIDX.SDK.Models.WebReg.CreateSessionResponse> GidxCreateSessionAsync(string user, string ip) {
            return base.Channel.GidxCreateSessionAsync(user, ip);
        }
        
        public GIDX.SDK.Models.WebCashier.CreateSessionResponse GidxCreateWebCashier(string user, string ipAddr, GIDX.SDK.Models.WebCashier.PayActionCode payCode, System.Nullable<decimal> amount) {
            return base.Channel.GidxCreateWebCashier(user, ipAddr, payCode, amount);
        }
        
        public System.Threading.Tasks.Task<GIDX.SDK.Models.WebCashier.CreateSessionResponse> GidxCreateWebCashierAsync(string user, string ipAddr, GIDX.SDK.Models.WebCashier.PayActionCode payCode, System.Nullable<decimal> amount) {
            return base.Channel.GidxCreateWebCashierAsync(user, ipAddr, payCode, amount);
        }
        
        public GIDX.SDK.Models.WebReg.SessionStatusCallbackResponse GidxCallbackResponse(string str) {
            return base.Channel.GidxCallbackResponse(str);
        }
        
        public System.Threading.Tasks.Task<GIDX.SDK.Models.WebReg.SessionStatusCallbackResponse> GidxCallbackResponseAsync(string str) {
            return base.Channel.GidxCallbackResponseAsync(str);
        }
        
        public GIDX.SDK.Models.WebCashier.SessionStatusCallbackResponse GidxCallbackWebCashier(string callback) {
            return base.Channel.GidxCallbackWebCashier(callback);
        }
        
        public System.Threading.Tasks.Task<GIDX.SDK.Models.WebCashier.SessionStatusCallbackResponse> GidxCallbackWebCashierAsync(string callback) {
            return base.Channel.GidxCallbackWebCashierAsync(callback);
        }
        
        public GIDX.SDK.Models.WebReg.RegistrationStatusResponse GidxGetSessionStatus(string user) {
            return base.Channel.GidxGetSessionStatus(user);
        }
        
        public System.Threading.Tasks.Task<GIDX.SDK.Models.WebReg.RegistrationStatusResponse> GidxGetSessionStatusAsync(string user) {
            return base.Channel.GidxGetSessionStatusAsync(user);
        }
        
        public bool GidxNotification(AltBet.Exchange.GidxNotification data) {
            return base.Channel.GidxNotification(data);
        }
        
        public System.Threading.Tasks.Task<bool> GidxNotificationAsync(AltBet.Exchange.GidxNotification data) {
            return base.Channel.GidxNotificationAsync(data);
        }
        
        public GIDX.SDK.Models.WebReg.CustomerRegistrationResponse GidxCustomerRegistration(string userName) {
            return base.Channel.GidxCustomerRegistration(userName);
        }
        
        public System.Threading.Tasks.Task<GIDX.SDK.Models.WebReg.CustomerRegistrationResponse> GidxCustomerRegistrationAsync(string userName) {
            return base.Channel.GidxCustomerRegistrationAsync(userName);
        }
        
        public string GidxUploadDocument(string userName, string urlToFile) {
            return base.Channel.GidxUploadDocument(userName, urlToFile);
        }
        
        public System.Threading.Tasks.Task<string> GidxUploadDocumentAsync(string userName, string urlToFile) {
            return base.Channel.GidxUploadDocumentAsync(userName, urlToFile);
        }
        
        public bool IsUserVerified(string username) {
            return base.Channel.IsUserVerified(username);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserVerifiedAsync(string username) {
            return base.Channel.IsUserVerifiedAsync(username);
        }
        
        public GIDX.SDK.Models.WebCashier.CreateSessionWebWalletResponse GidxWebWallet(string userName) {
            return base.Channel.GidxWebWallet(userName);
        }
        
        public System.Threading.Tasks.Task<GIDX.SDK.Models.WebCashier.CreateSessionWebWalletResponse> GidxWebWalletAsync(string userName) {
            return base.Channel.GidxWebWalletAsync(userName);
        }
    }
}
