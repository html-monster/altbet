//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AltBet.PaymentServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PaymentServiceReference.IPaymentManager")]
    public interface IPaymentManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentManager/NetellerOut", ReplyAction="http://tempuri.org/IPaymentManager/NetellerOutResponse")]
        AltBet.Model.Finances.NetellerModels.Payment NetellerOut(AltBet.Model.Finances.NetellerModels.TransferOut model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentManager/NetellerOut", ReplyAction="http://tempuri.org/IPaymentManager/NetellerOutResponse")]
        System.Threading.Tasks.Task<AltBet.Model.Finances.NetellerModels.Payment> NetellerOutAsync(AltBet.Model.Finances.NetellerModels.TransferOut model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentManager/NetellerIn", ReplyAction="http://tempuri.org/IPaymentManager/NetellerInResponse")]
        AltBet.Model.Finances.NetellerModels.Payment NetellerIn(AltBet.Model.Finances.NetellerModels.TransferIn model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentManager/NetellerIn", ReplyAction="http://tempuri.org/IPaymentManager/NetellerInResponse")]
        System.Threading.Tasks.Task<AltBet.Model.Finances.NetellerModels.Payment> NetellerInAsync(AltBet.Model.Finances.NetellerModels.TransferIn model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentManager/SkrillStatus", ReplyAction="http://tempuri.org/IPaymentManager/SkrillStatusResponse")]
        AltBet.Model.Finances.SkrillModels.SkrillAnswer SkrillStatus(AltBet.Model.Finances.SkrillModels.SkrillStatus model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentManager/SkrillStatus", ReplyAction="http://tempuri.org/IPaymentManager/SkrillStatusResponse")]
        System.Threading.Tasks.Task<AltBet.Model.Finances.SkrillModels.SkrillAnswer> SkrillStatusAsync(AltBet.Model.Finances.SkrillModels.SkrillStatus model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentManager/SkrillOut", ReplyAction="http://tempuri.org/IPaymentManager/SkrillOutResponse")]
        AltBet.Model.Finances.SkrillModels.SkrillOutResponse SkrillOut(AltBet.Model.Finances.SkrillModels.SkrillOutRequest model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentManager/SkrillOut", ReplyAction="http://tempuri.org/IPaymentManager/SkrillOutResponse")]
        System.Threading.Tasks.Task<AltBet.Model.Finances.SkrillModels.SkrillOutResponse> SkrillOutAsync(AltBet.Model.Finances.SkrillModels.SkrillOutRequest model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentManager/SkrillIn", ReplyAction="http://tempuri.org/IPaymentManager/SkrillInResponse")]
        AltBet.Model.Finances.SkrillModels.SkrillAnswer SkrillIn(AltBet.Model.Finances.SkrillModels.SkrillInRequest model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentManager/SkrillIn", ReplyAction="http://tempuri.org/IPaymentManager/SkrillInResponse")]
        System.Threading.Tasks.Task<AltBet.Model.Finances.SkrillModels.SkrillAnswer> SkrillInAsync(AltBet.Model.Finances.SkrillModels.SkrillInRequest model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentManager/SkrillOtherIn", ReplyAction="http://tempuri.org/IPaymentManager/SkrillOtherInResponse")]
        AltBet.Model.Finances.SkrillModels.SkrillAnswer SkrillOtherIn(AltBet.Model.Finances.SkrillModels.SkrillInRequest model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentManager/SkrillOtherIn", ReplyAction="http://tempuri.org/IPaymentManager/SkrillOtherInResponse")]
        System.Threading.Tasks.Task<AltBet.Model.Finances.SkrillModels.SkrillAnswer> SkrillOtherInAsync(AltBet.Model.Finances.SkrillModels.SkrillInRequest model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentManager/SkrillCancel", ReplyAction="http://tempuri.org/IPaymentManager/SkrillCancelResponse")]
        bool SkrillCancel(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentManager/SkrillCancel", ReplyAction="http://tempuri.org/IPaymentManager/SkrillCancelResponse")]
        System.Threading.Tasks.Task<bool> SkrillCancelAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentManager/ChangeBalance", ReplyAction="http://tempuri.org/IPaymentManager/ChangeBalanceResponse")]
        bool ChangeBalance(string username, decimal amount, byte addOrGet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentManager/ChangeBalance", ReplyAction="http://tempuri.org/IPaymentManager/ChangeBalanceResponse")]
        System.Threading.Tasks.Task<bool> ChangeBalanceAsync(string username, decimal amount, byte addOrGet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentManager/InsertHistory", ReplyAction="http://tempuri.org/IPaymentManager/InsertHistoryResponse")]
        bool InsertHistory(decimal amount, string systemtype, System.DateTime date, string direction, string userId, string transactId, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentManager/InsertHistory", ReplyAction="http://tempuri.org/IPaymentManager/InsertHistoryResponse")]
        System.Threading.Tasks.Task<bool> InsertHistoryAsync(decimal amount, string systemtype, System.DateTime date, string direction, string userId, string transactId, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentManager/UpdateHistory", ReplyAction="http://tempuri.org/IPaymentManager/UpdateHistoryResponse")]
        bool UpdateHistory(decimal amount, System.DateTime date, string transactId, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentManager/UpdateHistory", ReplyAction="http://tempuri.org/IPaymentManager/UpdateHistoryResponse")]
        System.Threading.Tasks.Task<bool> UpdateHistoryAsync(decimal amount, System.DateTime date, string transactId, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentManager/GetUsernameFromTransactId", ReplyAction="http://tempuri.org/IPaymentManager/GetUsernameFromTransactIdResponse")]
        string GetUsernameFromTransactId(string transactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentManager/GetUsernameFromTransactId", ReplyAction="http://tempuri.org/IPaymentManager/GetUsernameFromTransactIdResponse")]
        System.Threading.Tasks.Task<string> GetUsernameFromTransactIdAsync(string transactionId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPaymentManagerChannel : AltBet.PaymentServiceReference.IPaymentManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PaymentManagerClient : System.ServiceModel.ClientBase<AltBet.PaymentServiceReference.IPaymentManager>, AltBet.PaymentServiceReference.IPaymentManager {
        
        public PaymentManagerClient() {
        }
        
        public PaymentManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PaymentManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PaymentManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PaymentManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public AltBet.Model.Finances.NetellerModels.Payment NetellerOut(AltBet.Model.Finances.NetellerModels.TransferOut model) {
            return base.Channel.NetellerOut(model);
        }
        
        public System.Threading.Tasks.Task<AltBet.Model.Finances.NetellerModels.Payment> NetellerOutAsync(AltBet.Model.Finances.NetellerModels.TransferOut model) {
            return base.Channel.NetellerOutAsync(model);
        }
        
        public AltBet.Model.Finances.NetellerModels.Payment NetellerIn(AltBet.Model.Finances.NetellerModels.TransferIn model) {
            return base.Channel.NetellerIn(model);
        }
        
        public System.Threading.Tasks.Task<AltBet.Model.Finances.NetellerModels.Payment> NetellerInAsync(AltBet.Model.Finances.NetellerModels.TransferIn model) {
            return base.Channel.NetellerInAsync(model);
        }
        
        public AltBet.Model.Finances.SkrillModels.SkrillAnswer SkrillStatus(AltBet.Model.Finances.SkrillModels.SkrillStatus model) {
            return base.Channel.SkrillStatus(model);
        }
        
        public System.Threading.Tasks.Task<AltBet.Model.Finances.SkrillModels.SkrillAnswer> SkrillStatusAsync(AltBet.Model.Finances.SkrillModels.SkrillStatus model) {
            return base.Channel.SkrillStatusAsync(model);
        }
        
        public AltBet.Model.Finances.SkrillModels.SkrillOutResponse SkrillOut(AltBet.Model.Finances.SkrillModels.SkrillOutRequest model) {
            return base.Channel.SkrillOut(model);
        }
        
        public System.Threading.Tasks.Task<AltBet.Model.Finances.SkrillModels.SkrillOutResponse> SkrillOutAsync(AltBet.Model.Finances.SkrillModels.SkrillOutRequest model) {
            return base.Channel.SkrillOutAsync(model);
        }
        
        public AltBet.Model.Finances.SkrillModels.SkrillAnswer SkrillIn(AltBet.Model.Finances.SkrillModels.SkrillInRequest model) {
            return base.Channel.SkrillIn(model);
        }
        
        public System.Threading.Tasks.Task<AltBet.Model.Finances.SkrillModels.SkrillAnswer> SkrillInAsync(AltBet.Model.Finances.SkrillModels.SkrillInRequest model) {
            return base.Channel.SkrillInAsync(model);
        }
        
        public AltBet.Model.Finances.SkrillModels.SkrillAnswer SkrillOtherIn(AltBet.Model.Finances.SkrillModels.SkrillInRequest model) {
            return base.Channel.SkrillOtherIn(model);
        }
        
        public System.Threading.Tasks.Task<AltBet.Model.Finances.SkrillModels.SkrillAnswer> SkrillOtherInAsync(AltBet.Model.Finances.SkrillModels.SkrillInRequest model) {
            return base.Channel.SkrillOtherInAsync(model);
        }
        
        public bool SkrillCancel(string id) {
            return base.Channel.SkrillCancel(id);
        }
        
        public System.Threading.Tasks.Task<bool> SkrillCancelAsync(string id) {
            return base.Channel.SkrillCancelAsync(id);
        }
        
        public bool ChangeBalance(string username, decimal amount, byte addOrGet) {
            return base.Channel.ChangeBalance(username, amount, addOrGet);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeBalanceAsync(string username, decimal amount, byte addOrGet) {
            return base.Channel.ChangeBalanceAsync(username, amount, addOrGet);
        }
        
        public bool InsertHistory(decimal amount, string systemtype, System.DateTime date, string direction, string userId, string transactId, string status) {
            return base.Channel.InsertHistory(amount, systemtype, date, direction, userId, transactId, status);
        }
        
        public System.Threading.Tasks.Task<bool> InsertHistoryAsync(decimal amount, string systemtype, System.DateTime date, string direction, string userId, string transactId, string status) {
            return base.Channel.InsertHistoryAsync(amount, systemtype, date, direction, userId, transactId, status);
        }
        
        public bool UpdateHistory(decimal amount, System.DateTime date, string transactId, string status) {
            return base.Channel.UpdateHistory(amount, date, transactId, status);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateHistoryAsync(decimal amount, System.DateTime date, string transactId, string status) {
            return base.Channel.UpdateHistoryAsync(amount, date, transactId, status);
        }
        
        public string GetUsernameFromTransactId(string transactionId) {
            return base.Channel.GetUsernameFromTransactId(transactionId);
        }
        
        public System.Threading.Tasks.Task<string> GetUsernameFromTransactIdAsync(string transactionId) {
            return base.Channel.GetUsernameFromTransactIdAsync(transactionId);
        }
    }
}
