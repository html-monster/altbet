@using AltBet.Exchange
@model AltBet.Admin.Models.MainViewModel

<script type="text/javascript">
    globalData.controller = { name: "Index", action: "View" };
    globalData.timezone = JSON.parse(@Html.Raw(Json.Encode(Model.TimeZone)));
</script>


<script id="TPLeditExchangeDialog" type="text/x-handlebars-template">
    @Html.Partial("_EditExchange")
</script>

<script id="TPLexchDetails" type="text/x-handlebars-template">
    @Html.Partial("_ExchDetails")
</script>


<script id="TPLinfoMessage" type="text/x-handlebars-template">
    <div class="js-alert alert {{alertType}} alert-dismissible" data-js="infoMessWrapper">
        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
        <h4><i class="icon fa {{icon}}"></i> {{header}}</h4>
        {{text}}
    </div>
</script>


<div class="js-infomessage"></div>

<div class="custom_page">
    <div class="main_content">
        <div class="custom_container">
            <div class="container_xml_table">
                <div class="row">
                    <div class="col-sm-8">
                        @if (!string.IsNullOrEmpty(Model.LastNode))
                        {
                            <div class="box box-success ">
                                <div class="box-header with-border">
                                    <h3 class="box-title">Add new exchange</h3>

                                    <div class="box-tools pull-right">
                                        <button type="button" class="btn btn-box-tool" data-widget="collapse">
                                            <i class="fa fa-plus"></i>
                                        </button>
                                    </div>
                                    <!-- /.box-tools -->
                                </div>
                                <!-- /.box-header -->
                                <div class="box-body">
                                    <div id="addExchange">
                                        <br />
                                        @Html.Action("NewExchange")
                                    </div>
                                </div>
                                <!-- /.box-body -->
                            </div>
                        }
                    </div>
                </div>

                @{
                    var className = new string[4];
                    var title = new string[4];
                    string[] statClass = { "primary", "success", "warning", "default" };
                    var index = 1;
                }
                @if (Model.Status == StatusEvent.New) { index = 0; }
                @if (Model.Status == StatusEvent.Completed) { index = 2; }
                @if (Model.Status == StatusEvent.Settlement) { index = 3; }
                @{
                    className[index] = " active";
                    title[index] = "Active filter";
                }
                <div class="box box-@statClass[index]">
                    <div class="box-header">
                        @*<i class="fa fa-navicon"></i>*@
                        <h3 class="box-title">Exchanges</h3>
                    </div>
                    <div class="box-body pad table-responsive">
                        <div>
                            @Html.ActionLink("New", "Index", "Home", new { @path = Model.Path, @status = StatusEvent.New, ln = Model.LastNode }, new { @class = "btn-filter btn btn-primary btn-xs" + className[0], @title = title[0] })
                            @Html.ActionLink("Approved", "Index", "Home", new { @path = Model.Path, @status = StatusEvent.Approved, ln = Model.LastNode }, new { @class = "btn-filter btn btn-success btn-xs" + className[1], @title = title[1] })
                            @Html.ActionLink("Completed", "Index", "Home", new { @path = Model.Path, @status = StatusEvent.Completed, ln = Model.LastNode }, new { @class = "btn-filter btn btn-warning btn-xs" + className[2], @title = title[2] })
                            @Html.ActionLink("Settlement", "Index", "Home", new { @path = Model.Path, @status = StatusEvent.Settlement, ln = Model.LastNode }, new { @class = "btn-filter btn btn-default btn-xs" + className[3], @title = title[3] })
                        </div>

                        
                        <table class="exchanges xml_fied table" data-js="tabl-exch">
                            <thead>
                                <tr>
                                    <th>
                                        @{ 
                                            string titleAttr = (Model.OrderBy == "Asc" ? "sorted ascending" : "sorted descending");
                                            bool flag;
                                        }
                                        <span class="icon @Model.OrderBy @((flag = Model.SortBy.Contains("FullName")) ? "active" : "")" title="@(flag ? titleAttr : "")">
                                            @Html.ActionLink("Full name", "Index", new { @path = Model.Path, @status = Model.Status, ln = Model.LastNode, @sortBy = Model.NameSort, @orderBy = Model.OrderBy })
                                        </span>
                                    </th>
                                    <th><span>Home name</span></th>
                                    <th><span>Handicap</span></th>
                                    <th><span>Away name</span></th>
                                    <th><span>Handicap</span></th>
                                    <th>
                                        <span class="icon @Model.OrderBy @((flag = Model.SortBy.Contains("StartDate")) ? "active" : "")" title="@(flag ? titleAttr : "")">
                                            @Html.ActionLink("Start date", "Index", new { @path = Model.Path, @status = Model.Status, ln = Model.LastNode, @sortBy = Model.StartDateSort, @orderBy = Model.OrderBy })
                                        </span>
                                    </th>
                                    <th>
                                        <span class="icon @Model.OrderBy @((flag = Model.SortBy.Contains("EndDate")) ? "active" : "")" title="@(flag ? titleAttr : "")">
                                            @Html.ActionLink("End date", "Index", new { @path = Model.Path, @status = Model.Status, ln = Model.LastNode, @sortBy = Model.EndDateSort, @orderBy = Model.OrderBy })
                                        </span>
                                    </th>
                                    <th><span>Url</span></th>
                                    @if (Model.Status == StatusEvent.Settlement)
                                    {
                                        <th><span>Result</span></th>
                                    }
                                    <th></th>
                                </tr>
                            </thead>

                            @foreach (var item in Model.Exchanges)
                            {
                                <tbody>
                                    <tr class="exch-row" data-id="@item.Symbol.Exchange">
                                        <td data-js="TD-FullName">
                                            @Html.DisplayFor(m => item.Symbol.FullName)
                                        </td>
                                        <td data-js="TD-HomeName">
                                            @Html.DisplayFor(m => item.Symbol.HomeName)
                                        </td>
                                        <td data-js="TD-HomeHandicap">
                                            @string.Format("{0:n1}", item.Symbol.HomeHandicap)
                                        </td>
                                        <td data-js="TD-AwayName">
                                            @Html.DisplayFor(m => item.Symbol.AwayName)
                                        </td>
                                        <td data-js="TD-AwayHandicap">
                                            @string.Format("{0:n1}", item.Symbol.AwayHandicap)
                                        </td>
                                        <td data-js="TD-StartDate">
                                            @Html.DisplayFor(m => item.Symbol.StartDate)
                                        </td>
                                        <td data-js="TD-EndDate">
                                            @Html.DisplayFor(m => item.Symbol.EndDate)
                                        </td>
                                        <td data-js="TD-UrlExchange">
                                            @Html.DisplayFor(m => item.Symbol.UrlExchange)
                                        </td>
                                        @if (item.Symbol.Status == StatusEvent.Settlement)
                                        {
                                            <td>
                                                @Html.DisplayFor(m => item.Symbol.ResultExchange)
                                            </td>
                                        }
                                        <td>
                                            <div class="controls">
                                                <div class="btn-group">
                                                    <button type="button" data-js-btn-def-action="" class="btn btn-sm btn-default">Action</button>
                                                    <button type="button" class="btn btn-sm btn-default dropdown-toggle" data-toggle="dropdown">
                                                        <span class="caret"></span>
                                                        <span class="sr-only">Toggle Dropdown</span>
                                                    </button>
                                                    <ul class="dropdown-menu" role="menu">
                                                        @switch (item.Symbol.Status)
                                                        {
                                                            case StatusEvent.New:
                                                                <li><a href="#" class="js-btn-crud" data-type="edit" data-id="@item.Symbol.Exchange" data-name="@item.Symbol.FullName" title="Edit exchange">Edit</a></li>
                                                                <li><a href="#" class="js-btn-crud" data-type="del" data-id="@item.Symbol.Exchange" data-name="@item.Symbol.FullName" title="Delete exchange">Delete</a></li>
                                                                <li class="divider"></li>
                                                                <li><a href="#" class="js-btn-status" data-type="approve" data-id="@item.Symbol.Exchange" data-name="@item.Symbol.FullName" title="Set approved status">Set approved</a></li>
                                                                break;
                                                            case StatusEvent.Approved:
                                                            <li><a href="#" data-js-btn-detail="" title="Details exchange">Details</a></li>
                                                            <li><a href="#" class="js-btn-crud" data-type="edit" data-id="@item.Symbol.Exchange" data-name="@item.Symbol.FullName" title="Edit exchange">Edit</a></li>
                                                            <li class="divider"></li>
                                                            <li><a href="#" class="js-btn-status" data-type="complete" data-id="@item.Symbol.Exchange" data-name="@item.Symbol.FullName" title="Set completed status">Set completed</a></li>
                                                                break;
                                                            case StatusEvent.Completed:
                                                            <li><a href="#" data-js-btn-detail="" title="Details exchange">Details</a></li>
                                                            <li class="divider"></li>
                                                            <li><a href="#" class="js-btn-status" data-type="settlement" data-id="@item.Symbol.Exchange" data-name="@item.Symbol.FullName" title="Set settlement status">Set settlement</a></li>
                                                            <li><a href="#" class="js-btn-status" data-type="uncomplete" data-id="@item.Symbol.Exchange" data-name="@item.Symbol.FullName" title="Set approved status">Resume (set approved)</a></li>
                                                                break;
                                                            case StatusEvent.Settlement:
                                                            <li><a href="#" data-js-btn-detail="" title="Details exchange">Details</a></li>
                                                                break;
                                                        }
                                                    </ul>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                    <tr class="details">
                                        <td colspan="10"></td>
                                    </tr>
                                </tbody>
                            }
                        </table>

                    </div>
                    <!-- /.box -->
                </div>

            </div>
        </div>
    </div>
</div>
