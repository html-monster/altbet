/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "Scripts/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by Vlasakh on 27.12.2016.
	 */
	"use strict";
	/// <reference path="./../js/.d/common.d.ts" />
	/// <reference path="./../js/.d/jquery.d.ts" />
	var GroupsTree_1 = __webpack_require__(1);
	var AddExchangeForm_1 = __webpack_require__(3);
	$(document).ready(function () {
	    (new GroupsTree_1.GroupsTree()).init();
	    (new AddExchangeForm_1.AddExchangeForm()).init();
	});
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLWFkbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJ1bmRsZS1hZG0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0dBRUc7O0FBRUgsK0NBQStDO0FBQy9DLCtDQUErQztBQUUvQywyQkFBMkIsMEJBQTBCLENBQUMsQ0FBQTtBQUN0RCxnQ0FBZ0MsK0JBQStCLENBQUMsQ0FBQTtBQUdoRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDO0lBRWQsQ0FBQyxJQUFJLHVCQUFVLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzFCLENBQUMsSUFBSSxpQ0FBZSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNuQyxDQUFDLENBQUMsQ0FBQyJ9

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by Vlasakh on 29.12.2016.
	 */
	"use strict";
	/// <reference path="../../js/.d/common.d.ts" />
	var Dialog_1 = __webpack_require__(2);
	var GroupsTree = (function () {
	    function GroupsTree() {
	    }
	    GroupsTree.prototype.init = function () {
	        var self = this;
	        $('#DiCatTree').jstree({
	            "types": {
	                "fa-folder-o": {
	                    "icon": "fa fa-folder-o"
	                },
	            },
	            "plugins": ["types"]
	        });
	        // 0||console.debug( '$(".sidebar-menu .js-treeview.active")', $(".sidebar-menu .treeview.active") );
	        // open category tree for default
	        $(".js-tree-menu-item").click();
	        // 0||console.debug( '#DiCatTree .js-controls .js-btn', $('#DiCatTree .js-controls .js-btn') );
	        $('#DiCatTree').on('click', '.js-controls .js-btn', function (e) { self.onTreeControlClick(e, this); });
	    };
	    GroupsTree.prototype.onTreeControlClick = function (e, that) {
	        var $that = $(that);
	        0 || console.debug('$that.data(url)', $that.data('url'));
	        if ($that.data('type') == 'del') {
	            new Dialog_1.default({
	                TPLName: '#TPLmodalDialog',
	                target: '.js-dialog',
	                render: true,
	                vars: {
	                    title: 'Warning',
	                    modalBody: 'Delete category “' + $that.data('catname') + '” ?',
	                    btnOkTitle: 'Delete',
	                    btnCancelTitle: 'Cancel',
	                    type: 'modal-danger',
	                },
	                callbackOK: function () { alert('deleted'); }
	            });
	        }
	        else {
	            location.href = $that.data('url');
	        } // endif
	    };
	    return GroupsTree;
	}());
	exports.GroupsTree = GroupsTree;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR3JvdXBzVHJlZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkdyb3Vwc1RyZWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0dBRUc7O0FBRUgsZ0RBQWdEO0FBRWhELHVCQUFtQixxQkFBcUIsQ0FBQyxDQUFBO0FBR3pDO0lBQUE7SUEwREEsQ0FBQztJQXhEVSx5QkFBSSxHQUFYO1FBRUksSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBRWhCLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxNQUFNLENBQ3RCO1lBQ0ksT0FBTyxFQUFFO2dCQUNMLGFBQWEsRUFBRTtvQkFDWCxNQUFNLEVBQUUsZ0JBQWdCO2lCQUMzQjthQUlKO1lBQ0QsU0FBUyxFQUFFLENBQUMsT0FBTyxDQUFDO1NBQ3ZCLENBQUMsQ0FBQztRQUVILHFHQUFxRztRQUVyRyxpQ0FBaUM7UUFDakMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7UUFJaEMsK0ZBQStGO1FBQy9GLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLHNCQUFzQixFQUFFLFVBQVUsQ0FBQyxJQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1RyxDQUFDO0lBSU0sdUNBQWtCLEdBQXpCLFVBQTBCLENBQUMsRUFBRSxJQUFJO1FBRTdCLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwQixDQUFDLElBQUUsT0FBTyxDQUFDLEtBQUssQ0FBRSxpQkFBaUIsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFFLENBQUM7UUFFekQsRUFBRSxDQUFBLENBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFNLENBQUMsQ0FDakMsQ0FBQztZQUNHLElBQUksZ0JBQU0sQ0FBQztnQkFDUCxPQUFPLEVBQUUsaUJBQWlCO2dCQUMxQixNQUFNLEVBQUUsWUFBWTtnQkFDcEIsTUFBTSxFQUFFLElBQUk7Z0JBQ1osSUFBSSxFQUFFO29CQUNGLEtBQUssRUFBRSxTQUFTO29CQUNoQixTQUFTLEVBQUUsbUJBQW1CLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxLQUFLO29CQUM5RCxVQUFVLEVBQUUsUUFBUTtvQkFDcEIsY0FBYyxFQUFFLFFBQVE7b0JBQ3hCLElBQUksRUFBRSxjQUFjO2lCQUN2QjtnQkFDRCxVQUFVLEVBQUUsY0FBYSxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUEsQ0FBQyxDQUFDO2FBQzlDLENBQUMsQ0FBQztRQUNQLENBQUM7UUFDRCxJQUFJLENBQ0osQ0FBQztZQUNHLFFBQVEsQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN0QyxDQUFDLENBQUMsUUFBUTtJQUNkLENBQUM7SUFDTCxpQkFBQztBQUFELENBQUMsQUExREQsSUEwREM7QUExRFksa0JBQVUsYUEwRHRCLENBQUEifQ==

/***/ },
/* 2 */
/***/ function(module, exports) {

	/**
	 * Created by Vlasakh on 30.12.2016.
	 */
	"use strict";
	var Dialog = (function () {
	    function Dialog(props) {
	        if (props) {
	            this.saveProps(props);
	            if (props.render)
	                this.render();
	        } // endif
	    }
	    Dialog.prototype.render = function (inProps) {
	        var self = this;
	        if (inProps)
	            this.saveProps(inProps);
	        var source = $(this.TPLName).html();
	        var template = Handlebars.compile(source);
	        var html = template(this.vars);
	        // 0||console.debug( 'html', html );
	        $(this.target).html(html);
	        $("[data-js=cancel], [data-js=wrapper]", this.target).click(function (e) { self.onCloseClick(); });
	        $("[data-js=ok]", this.target).click(function (e) { self.onOkClick(); });
	        $("[data-js=wrapper]", this.target).fadeIn(400);
	    };
	    Dialog.prototype.saveProps = function (inProps) {
	        if (inProps.TPLName)
	            this.TPLName = inProps.TPLName;
	        if (inProps.target)
	            this.target = inProps.target;
	        if (inProps.vars)
	            this.vars = inProps.vars;
	        if (inProps.callbackOK)
	            this.callbackOK = inProps.callbackOK;
	        if (inProps.callbackCancel)
	            this.callbackCancel = inProps.callbackCancel;
	    };
	    Dialog.prototype.onCloseClick = function () {
	        if (this.callbackCancel)
	            this.callbackCancel();
	        $("[data-js=wrapper]", this.target).fadeOut(200);
	    };
	    Dialog.prototype.onOkClick = function () {
	        if (this.callbackOK)
	            this.callbackOK();
	        $("[data-js=wrapper]", this.target).fadeOut(200);
	    };
	    return Dialog;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Dialog;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGlhbG9nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiRGlhbG9nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztHQUVHOztBQUtIO0lBU0ksZ0JBQVksS0FBTTtRQUVkLEVBQUUsQ0FBQSxDQUFFLEtBQU0sQ0FBQyxDQUNYLENBQUM7WUFDRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3RCLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7Z0JBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ3BDLENBQUMsQ0FBQyxRQUFRO0lBQ2QsQ0FBQztJQUlNLHVCQUFNLEdBQWIsVUFBYyxPQUFRO1FBRWxCLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztRQUVoQixFQUFFLENBQUEsQ0FBRSxPQUFRLENBQUM7WUFBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBR3RDLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDcEMsSUFBSSxRQUFRLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMxQyxJQUFJLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRW5DLG9DQUFvQztRQUVoQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxQixDQUFDLENBQUMscUNBQXFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFTLENBQUMsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqRyxDQUFDLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBUyxDQUFDLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFHdkUsQ0FBQyxDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUlPLDBCQUFTLEdBQWpCLFVBQWtCLE9BQU87UUFFckIsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztZQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQztRQUNwRCxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO1lBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO1FBQ2pELEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7WUFBQyxJQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFDM0MsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQztZQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQztRQUM3RCxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDO1lBQUMsSUFBSSxDQUFDLGNBQWMsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDO0lBQzdFLENBQUM7SUFJTyw2QkFBWSxHQUFwQjtRQUVJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUM7WUFBQyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDL0MsQ0FBQyxDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUlPLDBCQUFTLEdBQWpCO1FBRUksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztZQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUN2QyxDQUFDLENBQUMsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBQ0wsYUFBQztBQUFELENBQUMsQUFuRUQsSUFtRUM7QUFuRUQ7d0JBbUVDLENBQUEifQ==

/***/ },
/* 3 */
/***/ function(module, exports) {

	/**
	 * Created by Vlasakh on 29.12.2016.
	 */
	"use strict";
	/// <reference path="../../js/.d/common.d.ts" />
	var AddExchangeForm = (function () {
	    function AddExchangeForm() {
	    }
	    AddExchangeForm.prototype.init = function () {
	        $('.js-dt-start-date, .js-dt-end-date').daterangepicker({
	            "singleDatePicker": true,
	            "showDropdowns": true,
	            "showWeekNumbers": true,
	            "timePicker": true,
	            "timePicker24Hour": true,
	            timePickerIncrement: 5,
	            "opens": "left",
	            locale: {
	                format: 'MM/DD/YYYY H:mm'
	            }
	        });
	        // $(".js-cb-ddlstatus").select2();
	        // });
	    };
	    return AddExchangeForm;
	}());
	exports.AddExchangeForm = AddExchangeForm;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWRkRXhjaGFuZ2VGb3JtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQWRkRXhjaGFuZ2VGb3JtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztHQUVHOztBQUVILGdEQUFnRDtBQUdoRDtJQUFBO0lBb0JBLENBQUM7SUFsQlUsOEJBQUksR0FBWDtRQUVJLENBQUMsQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDLGVBQWUsQ0FBQztZQUNwRCxrQkFBa0IsRUFBRSxJQUFJO1lBQ3hCLGVBQWUsRUFBRSxJQUFJO1lBQ3JCLGlCQUFpQixFQUFFLElBQUk7WUFDdkIsWUFBWSxFQUFFLElBQUk7WUFDbEIsa0JBQWtCLEVBQUUsSUFBSTtZQUN4QixtQkFBbUIsRUFBRSxDQUFDO1lBQ3RCLE9BQU8sRUFBRSxNQUFNO1lBQ2YsTUFBTSxFQUFFO2dCQUNKLE1BQU0sRUFBRSxpQkFBaUI7YUFDNUI7U0FDSixDQUFDLENBQUM7UUFFSCxtQ0FBbUM7UUFDbkMsTUFBTTtJQUNWLENBQUM7SUFDTCxzQkFBQztBQUFELENBQUMsQUFwQkQsSUFvQkM7QUFwQlksdUJBQWUsa0JBb0IzQixDQUFBIn0=

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgNmI2MzUwYzE4NDk2YWIwOWUyYzIiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvYWRtaW5fdHMvYnVuZGxlLWFkbS50cyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9hZG1pbl90cy9jb250cm9sbGVycy9Hcm91cHNUcmVlLnRzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL2FkbWluX3RzL2NvbXBvbmVudC9EaWFsb2cudHMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvYWRtaW5fdHMvY29udHJvbGxlcnMvQWRkRXhjaGFuZ2VGb3JtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1QkFBZTtBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7O0FDdENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFDO0FBQ0QsNENBQTJDLCtlOzs7Ozs7QUNaM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWlCO0FBQ2pCLGNBQWE7QUFDYjtBQUNBLFVBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJFQUEwRSxrQ0FBa0MsRUFBRTtBQUM5RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBaUI7QUFDakIsMENBQXlDLGtCQUFrQjtBQUMzRCxjQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQSxFQUFDO0FBQ0Q7QUFDQSw0Q0FBMkMsdTBEOzs7Ozs7QUNsRDNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUZBQWtGLHFCQUFxQixFQUFFO0FBQ3pHLDREQUEyRCxrQkFBa0IsRUFBRTtBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUM7QUFDRCwrQ0FBOEMsY0FBYztBQUM1RDtBQUNBLDRDQUEyQyx1L0U7Ozs7OztBQ25EM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVM7QUFDVDtBQUNBLGFBQVk7QUFDWjtBQUNBO0FBQ0EsRUFBQztBQUNEO0FBQ0EsNENBQTJDLG1zQiIsImZpbGUiOiJidW5kbGUtYWRtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiU2NyaXB0cy9cIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCA2YjYzNTBjMTg0OTZhYjA5ZTJjMiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IFZsYXNha2ggb24gMjcuMTIuMjAxNi5cclxuICovXHJcblwidXNlIHN0cmljdFwiO1xyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi8uLi9qcy8uZC9jb21tb24uZC50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLy4uL2pzLy5kL2pxdWVyeS5kLnRzXCIgLz5cclxudmFyIEdyb3Vwc1RyZWVfMSA9IHJlcXVpcmUoXCIuL2NvbnRyb2xsZXJzL0dyb3Vwc1RyZWVcIik7XHJcbnZhciBBZGRFeGNoYW5nZUZvcm1fMSA9IHJlcXVpcmUoXCIuL2NvbnRyb2xsZXJzL0FkZEV4Y2hhbmdlRm9ybVwiKTtcclxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xyXG4gICAgKG5ldyBHcm91cHNUcmVlXzEuR3JvdXBzVHJlZSgpKS5pbml0KCk7XHJcbiAgICAobmV3IEFkZEV4Y2hhbmdlRm9ybV8xLkFkZEV4Y2hhbmdlRm9ybSgpKS5pbml0KCk7XHJcbn0pO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZblZ1Wkd4bExXRmtiUzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYkltSjFibVJzWlMxaFpHMHVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN08wZEJSVWM3TzBGQlJVZ3NLME5CUVN0RE8wRkJReTlETEN0RFFVRXJRenRCUVVVdlF5d3lRa0ZCTWtJc01FSkJRVEJDTEVOQlFVTXNRMEZCUVR0QlFVTjBSQ3huUTBGQlowTXNLMEpCUVN0Q0xFTkJRVU1zUTBGQlFUdEJRVWRvUlN4RFFVRkRMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETzBsQlJXUXNRMEZCUXl4SlFVRkpMSFZDUVVGVkxFVkJRVVVzUTBGQlF5eERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRPMGxCUXpGQ0xFTkJRVU1zU1VGQlNTeHBRMEZCWlN4RlFVRkZMRU5CUVVNc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF6dEJRVU51UXl4RFFVRkRMRU5CUVVNc1EwRkJReUo5XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9hZG1pbl90cy9idW5kbGUtYWRtLnRzXG4vLyBtb2R1bGUgaWQgPSAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IFZsYXNha2ggb24gMjkuMTIuMjAxNi5cclxuICovXHJcblwidXNlIHN0cmljdFwiO1xyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vanMvLmQvY29tbW9uLmQudHNcIiAvPlxyXG52YXIgRGlhbG9nXzEgPSByZXF1aXJlKFwiLi4vY29tcG9uZW50L0RpYWxvZ1wiKTtcclxudmFyIEdyb3Vwc1RyZWUgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gR3JvdXBzVHJlZSgpIHtcclxuICAgIH1cclxuICAgIEdyb3Vwc1RyZWUucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICQoJyNEaUNhdFRyZWUnKS5qc3RyZWUoe1xyXG4gICAgICAgICAgICBcInR5cGVzXCI6IHtcclxuICAgICAgICAgICAgICAgIFwiZmEtZm9sZGVyLW9cIjoge1xyXG4gICAgICAgICAgICAgICAgICAgIFwiaWNvblwiOiBcImZhIGZhLWZvbGRlci1vXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIFwicGx1Z2luc1wiOiBbXCJ0eXBlc1wiXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIDB8fGNvbnNvbGUuZGVidWcoICckKFwiLnNpZGViYXItbWVudSAuanMtdHJlZXZpZXcuYWN0aXZlXCIpJywgJChcIi5zaWRlYmFyLW1lbnUgLnRyZWV2aWV3LmFjdGl2ZVwiKSApO1xyXG4gICAgICAgIC8vIG9wZW4gY2F0ZWdvcnkgdHJlZSBmb3IgZGVmYXVsdFxyXG4gICAgICAgICQoXCIuanMtdHJlZS1tZW51LWl0ZW1cIikuY2xpY2soKTtcclxuICAgICAgICAvLyAwfHxjb25zb2xlLmRlYnVnKCAnI0RpQ2F0VHJlZSAuanMtY29udHJvbHMgLmpzLWJ0bicsICQoJyNEaUNhdFRyZWUgLmpzLWNvbnRyb2xzIC5qcy1idG4nKSApO1xyXG4gICAgICAgICQoJyNEaUNhdFRyZWUnKS5vbignY2xpY2snLCAnLmpzLWNvbnRyb2xzIC5qcy1idG4nLCBmdW5jdGlvbiAoZSkgeyBzZWxmLm9uVHJlZUNvbnRyb2xDbGljayhlLCB0aGlzKTsgfSk7XHJcbiAgICB9O1xyXG4gICAgR3JvdXBzVHJlZS5wcm90b3R5cGUub25UcmVlQ29udHJvbENsaWNrID0gZnVuY3Rpb24gKGUsIHRoYXQpIHtcclxuICAgICAgICB2YXIgJHRoYXQgPSAkKHRoYXQpO1xyXG4gICAgICAgIDAgfHwgY29uc29sZS5kZWJ1ZygnJHRoYXQuZGF0YSh1cmwpJywgJHRoYXQuZGF0YSgndXJsJykpO1xyXG4gICAgICAgIGlmICgkdGhhdC5kYXRhKCd0eXBlJykgPT0gJ2RlbCcpIHtcclxuICAgICAgICAgICAgbmV3IERpYWxvZ18xLmRlZmF1bHQoe1xyXG4gICAgICAgICAgICAgICAgVFBMTmFtZTogJyNUUExtb2RhbERpYWxvZycsXHJcbiAgICAgICAgICAgICAgICB0YXJnZXQ6ICcuanMtZGlhbG9nJyxcclxuICAgICAgICAgICAgICAgIHJlbmRlcjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHZhcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ1dhcm5pbmcnLFxyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsQm9keTogJ0RlbGV0ZSBjYXRlZ29yeSDigJwnICsgJHRoYXQuZGF0YSgnY2F0bmFtZScpICsgJ+KAnSA/JyxcclxuICAgICAgICAgICAgICAgICAgICBidG5Pa1RpdGxlOiAnRGVsZXRlJyxcclxuICAgICAgICAgICAgICAgICAgICBidG5DYW5jZWxUaXRsZTogJ0NhbmNlbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ21vZGFsLWRhbmdlcicsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2tPSzogZnVuY3Rpb24gKCkgeyBhbGVydCgnZGVsZXRlZCcpOyB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbG9jYXRpb24uaHJlZiA9ICR0aGF0LmRhdGEoJ3VybCcpO1xyXG4gICAgICAgIH0gLy8gZW5kaWZcclxuICAgIH07XHJcbiAgICByZXR1cm4gR3JvdXBzVHJlZTtcclxufSgpKTtcclxuZXhwb3J0cy5Hcm91cHNUcmVlID0gR3JvdXBzVHJlZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pUjNKdmRYQnpWSEpsWlM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJa2R5YjNWd2MxUnlaV1V1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdPMGRCUlVjN08wRkJSVWdzWjBSQlFXZEVPMEZCUldoRUxIVkNRVUZ0UWl4eFFrRkJjVUlzUTBGQlF5eERRVUZCTzBGQlIzcERPMGxCUVVFN1NVRXdSRUVzUTBGQlF6dEpRWGhFVlN4NVFrRkJTU3hIUVVGWU8xRkJSVWtzU1VGQlNTeEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRPMUZCUldoQ0xFTkJRVU1zUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUTNSQ08xbEJRMGtzVDBGQlR5eEZRVUZGTzJkQ1FVTk1MR0ZCUVdFc1JVRkJSVHR2UWtGRFdDeE5RVUZOTEVWQlFVVXNaMEpCUVdkQ08ybENRVU16UWp0aFFVbEtPMWxCUTBRc1UwRkJVeXhGUVVGRkxFTkJRVU1zVDBGQlR5eERRVUZETzFOQlEzWkNMRU5CUVVNc1EwRkJRenRSUVVWSUxIRkhRVUZ4Unp0UlFVVnlSeXhwUTBGQmFVTTdVVUZEYWtNc1EwRkJReXhEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU03VVVGSmFFTXNLMFpCUVN0R08xRkJReTlHTEVOQlFVTXNRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zVDBGQlR5eEZRVUZGTEhOQ1FVRnpRaXhGUVVGRkxGVkJRVlVzUTBGQlF5eEpRVUZKTEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eERRVUZETEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU0xUnl4RFFVRkRPMGxCU1Uwc2RVTkJRV3RDTEVkQlFYcENMRlZCUVRCQ0xFTkJRVU1zUlVGQlJTeEpRVUZKTzFGQlJUZENMRWxCUVVrc1MwRkJTeXhIUVVGSExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTndRaXhEUVVGRExFbEJRVVVzVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUlN4cFFrRkJhVUlzUlVGQlJTeExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRkxFTkJRVU03VVVGRmVrUXNSVUZCUlN4RFFVRkJMRU5CUVVVc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4TFFVRk5MRU5CUVVNc1EwRkRha01zUTBGQlF6dFpRVU5ITEVsQlFVa3NaMEpCUVUwc1EwRkJRenRuUWtGRFVDeFBRVUZQTEVWQlFVVXNhVUpCUVdsQ08yZENRVU14UWl4TlFVRk5MRVZCUVVVc1dVRkJXVHRuUWtGRGNFSXNUVUZCVFN4RlFVRkZMRWxCUVVrN1owSkJRMW9zU1VGQlNTeEZRVUZGTzI5Q1FVTkdMRXRCUVVzc1JVRkJSU3hUUVVGVE8yOUNRVU5vUWl4VFFVRlRMRVZCUVVVc2JVSkJRVzFDTEVkQlFVY3NTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eExRVUZMTzI5Q1FVTTVSQ3hWUVVGVkxFVkJRVVVzVVVGQlVUdHZRa0ZEY0VJc1kwRkJZeXhGUVVGRkxGRkJRVkU3YjBKQlEzaENMRWxCUVVrc1JVRkJSU3hqUVVGak8ybENRVU4yUWp0blFrRkRSQ3hWUVVGVkxFVkJRVVVzWTBGQllTeExRVUZMTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVFc1EwRkJReXhEUVVGRE8yRkJRemxETEVOQlFVTXNRMEZCUXp0UlFVTlFMRU5CUVVNN1VVRkRSQ3hKUVVGSkxFTkJRMG9zUTBGQlF6dFpRVU5ITEZGQlFWRXNRMEZCUXl4SlFVRkpMRWRCUVVjc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0UlFVTjBReXhEUVVGRExFTkJRVU1zVVVGQlVUdEpRVU5rTEVOQlFVTTdTVUZEVEN4cFFrRkJRenRCUVVGRUxFTkJRVU1zUVVFeFJFUXNTVUV3UkVNN1FVRXhSRmtzYTBKQlFWVXNZVUV3UkhSQ0xFTkJRVUVpZlE9PVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZnJvbnRlbmQvYWRtaW5fdHMvY29udHJvbGxlcnMvR3JvdXBzVHJlZS50c1xuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcclxuICogQ3JlYXRlZCBieSBWbGFzYWtoIG9uIDMwLjEyLjIwMTYuXHJcbiAqL1xyXG5cInVzZSBzdHJpY3RcIjtcclxudmFyIERpYWxvZyA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEaWFsb2cocHJvcHMpIHtcclxuICAgICAgICBpZiAocHJvcHMpIHtcclxuICAgICAgICAgICAgdGhpcy5zYXZlUHJvcHMocHJvcHMpO1xyXG4gICAgICAgICAgICBpZiAocHJvcHMucmVuZGVyKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIoKTtcclxuICAgICAgICB9IC8vIGVuZGlmXHJcbiAgICB9XHJcbiAgICBEaWFsb2cucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChpblByb3BzKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIGlmIChpblByb3BzKVxyXG4gICAgICAgICAgICB0aGlzLnNhdmVQcm9wcyhpblByb3BzKTtcclxuICAgICAgICB2YXIgc291cmNlID0gJCh0aGlzLlRQTE5hbWUpLmh0bWwoKTtcclxuICAgICAgICB2YXIgdGVtcGxhdGUgPSBIYW5kbGViYXJzLmNvbXBpbGUoc291cmNlKTtcclxuICAgICAgICB2YXIgaHRtbCA9IHRlbXBsYXRlKHRoaXMudmFycyk7XHJcbiAgICAgICAgLy8gMHx8Y29uc29sZS5kZWJ1ZyggJ2h0bWwnLCBodG1sICk7XHJcbiAgICAgICAgJCh0aGlzLnRhcmdldCkuaHRtbChodG1sKTtcclxuICAgICAgICAkKFwiW2RhdGEtanM9Y2FuY2VsXSwgW2RhdGEtanM9d3JhcHBlcl1cIiwgdGhpcy50YXJnZXQpLmNsaWNrKGZ1bmN0aW9uIChlKSB7IHNlbGYub25DbG9zZUNsaWNrKCk7IH0pO1xyXG4gICAgICAgICQoXCJbZGF0YS1qcz1va11cIiwgdGhpcy50YXJnZXQpLmNsaWNrKGZ1bmN0aW9uIChlKSB7IHNlbGYub25Pa0NsaWNrKCk7IH0pO1xyXG4gICAgICAgICQoXCJbZGF0YS1qcz13cmFwcGVyXVwiLCB0aGlzLnRhcmdldCkuZmFkZUluKDQwMCk7XHJcbiAgICB9O1xyXG4gICAgRGlhbG9nLnByb3RvdHlwZS5zYXZlUHJvcHMgPSBmdW5jdGlvbiAoaW5Qcm9wcykge1xyXG4gICAgICAgIGlmIChpblByb3BzLlRQTE5hbWUpXHJcbiAgICAgICAgICAgIHRoaXMuVFBMTmFtZSA9IGluUHJvcHMuVFBMTmFtZTtcclxuICAgICAgICBpZiAoaW5Qcm9wcy50YXJnZXQpXHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0ID0gaW5Qcm9wcy50YXJnZXQ7XHJcbiAgICAgICAgaWYgKGluUHJvcHMudmFycylcclxuICAgICAgICAgICAgdGhpcy52YXJzID0gaW5Qcm9wcy52YXJzO1xyXG4gICAgICAgIGlmIChpblByb3BzLmNhbGxiYWNrT0spXHJcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tPSyA9IGluUHJvcHMuY2FsbGJhY2tPSztcclxuICAgICAgICBpZiAoaW5Qcm9wcy5jYWxsYmFja0NhbmNlbClcclxuICAgICAgICAgICAgdGhpcy5jYWxsYmFja0NhbmNlbCA9IGluUHJvcHMuY2FsbGJhY2tDYW5jZWw7XHJcbiAgICB9O1xyXG4gICAgRGlhbG9nLnByb3RvdHlwZS5vbkNsb3NlQ2xpY2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2FsbGJhY2tDYW5jZWwpXHJcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tDYW5jZWwoKTtcclxuICAgICAgICAkKFwiW2RhdGEtanM9d3JhcHBlcl1cIiwgdGhpcy50YXJnZXQpLmZhZGVPdXQoMjAwKTtcclxuICAgIH07XHJcbiAgICBEaWFsb2cucHJvdG90eXBlLm9uT2tDbGljayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5jYWxsYmFja09LKVxyXG4gICAgICAgICAgICB0aGlzLmNhbGxiYWNrT0soKTtcclxuICAgICAgICAkKFwiW2RhdGEtanM9d3JhcHBlcl1cIiwgdGhpcy50YXJnZXQpLmZhZGVPdXQoMjAwKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRGlhbG9nO1xyXG59KCkpO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuZGVmYXVsdCA9IERpYWxvZztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pUkdsaGJHOW5MbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaVJHbGhiRzluTG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPenRIUVVWSE96dEJRVXRJTzBsQlUwa3NaMEpCUVZrc1MwRkJUVHRSUVVWa0xFVkJRVVVzUTBGQlFTeERRVUZGTEV0QlFVMHNRMEZCUXl4RFFVTllMRU5CUVVNN1dVRkRSeXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMWxCUTNSQ0xFVkJRVVVzUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNN1owSkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRPMUZCUTNCRExFTkJRVU1zUTBGQlF5eFJRVUZSTzBsQlEyUXNRMEZCUXp0SlFVbE5MSFZDUVVGTkxFZEJRV0lzVlVGQll5eFBRVUZSTzFGQlJXeENMRWxCUVVrc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF6dFJRVVZvUWl4RlFVRkZMRU5CUVVFc1EwRkJSU3hQUVVGUkxFTkJRVU03V1VGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8xRkJSM1JETEVsQlFVa3NUVUZCVFN4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNN1VVRkRjRU1zU1VGQlNTeFJRVUZSTEVkQlFVY3NWVUZCVlN4RFFVRkRMRTlCUVU4c1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dFJRVU14UXl4SlFVRkpMRWxCUVVrc1IwRkJSeXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUlc1RExHOURRVUZ2UXp0UlFVVm9ReXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFJRVU14UWl4RFFVRkRMRU5CUVVNc2NVTkJRWEZETEVWQlFVVXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF5eFZRVUZUTEVOQlFVTXNTVUZCU1N4SlFVRkpMRU5CUVVNc1dVRkJXU3hGUVVGRkxFTkJRVUVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTnFSeXhEUVVGRExFTkJRVU1zWTBGQll5eEZRVUZGTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zVlVGQlV5eERRVUZETEVsQlFVa3NTVUZCU1N4RFFVRkRMRk5CUVZNc1JVRkJSU3hEUVVGQkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdVVUZIZGtVc1EwRkJReXhEUVVGRExHMUNRVUZ0UWl4RlFVRkZMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1NVRkRjRVFzUTBGQlF6dEpRVWxQTERCQ1FVRlRMRWRCUVdwQ0xGVkJRV3RDTEU5QlFVODdVVUZGY2tJc1JVRkJSU3hEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEU5QlFVOHNRMEZCUXp0WlFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFZEJRVWNzVDBGQlR5eERRVUZETEU5QlFVOHNRMEZCUXp0UlFVTndSQ3hGUVVGRkxFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNUVUZCVFN4RFFVRkRPMWxCUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUjBGQlJ5eFBRVUZQTEVOQlFVTXNUVUZCVFN4RFFVRkRPMUZCUTJwRUxFVkJRVVVzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNN1dVRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNN1VVRkRNME1zUlVGQlJTeERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVZVc1EwRkJRenRaUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVkQlFVY3NUMEZCVHl4RFFVRkRMRlZCUVZVc1EwRkJRenRSUVVNM1JDeEZRVUZGTEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1kwRkJZeXhEUVVGRE8xbEJRVU1zU1VGQlNTeERRVUZETEdOQlFXTXNSMEZCUnl4UFFVRlBMRU5CUVVNc1kwRkJZeXhEUVVGRE8wbEJRemRGTEVOQlFVTTdTVUZKVHl3MlFrRkJXU3hIUVVGd1FqdFJRVVZKTEVWQlFVVXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU03V1VGQlF5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RlFVRkZMRU5CUVVNN1VVRkRMME1zUTBGQlF5eERRVUZETEcxQ1FVRnRRaXhGUVVGRkxFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03U1VGRGNrUXNRMEZCUXp0SlFVbFBMREJDUVVGVExFZEJRV3BDTzFGQlJVa3NSVUZCUlN4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF6dFpRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRVZCUVVVc1EwRkJRenRSUVVOMlF5eERRVUZETEVOQlFVTXNiVUpCUVcxQ0xFVkJRVVVzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dEpRVU55UkN4RFFVRkRPMGxCUTB3c1lVRkJRenRCUVVGRUxFTkJRVU1zUVVGdVJVUXNTVUZ0UlVNN1FVRnVSVVE3ZDBKQmJVVkRMRU5CUVVFaWZRPT1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2FkbWluX3RzL2NvbXBvbmVudC9EaWFsb2cudHNcbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgVmxhc2FraCBvbiAyOS4xMi4yMDE2LlxyXG4gKi9cclxuXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9qcy8uZC9jb21tb24uZC50c1wiIC8+XHJcbnZhciBBZGRFeGNoYW5nZUZvcm0gPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQWRkRXhjaGFuZ2VGb3JtKCkge1xyXG4gICAgfVxyXG4gICAgQWRkRXhjaGFuZ2VGb3JtLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICQoJy5qcy1kdC1zdGFydC1kYXRlLCAuanMtZHQtZW5kLWRhdGUnKS5kYXRlcmFuZ2VwaWNrZXIoe1xyXG4gICAgICAgICAgICBcInNpbmdsZURhdGVQaWNrZXJcIjogdHJ1ZSxcclxuICAgICAgICAgICAgXCJzaG93RHJvcGRvd25zXCI6IHRydWUsXHJcbiAgICAgICAgICAgIFwic2hvd1dlZWtOdW1iZXJzXCI6IHRydWUsXHJcbiAgICAgICAgICAgIFwidGltZVBpY2tlclwiOiB0cnVlLFxyXG4gICAgICAgICAgICBcInRpbWVQaWNrZXIyNEhvdXJcIjogdHJ1ZSxcclxuICAgICAgICAgICAgdGltZVBpY2tlckluY3JlbWVudDogNSxcclxuICAgICAgICAgICAgXCJvcGVuc1wiOiBcImxlZnRcIixcclxuICAgICAgICAgICAgbG9jYWxlOiB7XHJcbiAgICAgICAgICAgICAgICBmb3JtYXQ6ICdNTS9ERC9ZWVlZIEg6bW0nXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyAkKFwiLmpzLWNiLWRkbHN0YXR1c1wiKS5zZWxlY3QyKCk7XHJcbiAgICAgICAgLy8gfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEFkZEV4Y2hhbmdlRm9ybTtcclxufSgpKTtcclxuZXhwb3J0cy5BZGRFeGNoYW5nZUZvcm0gPSBBZGRFeGNoYW5nZUZvcm07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVFXUmtSWGhqYUdGdVoyVkdiM0p0TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lRV1JrUlhoamFHRnVaMlZHYjNKdExuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCT3p0SFFVVkhPenRCUVVWSUxHZEVRVUZuUkR0QlFVZG9SRHRKUVVGQk8wbEJiMEpCTEVOQlFVTTdTVUZzUWxVc09FSkJRVWtzUjBGQldEdFJRVVZKTEVOQlFVTXNRMEZCUXl4dlEwRkJiME1zUTBGQlF5eERRVUZETEdWQlFXVXNRMEZCUXp0WlFVTndSQ3hyUWtGQmEwSXNSVUZCUlN4SlFVRkpPMWxCUTNoQ0xHVkJRV1VzUlVGQlJTeEpRVUZKTzFsQlEzSkNMR2xDUVVGcFFpeEZRVUZGTEVsQlFVazdXVUZEZGtJc1dVRkJXU3hGUVVGRkxFbEJRVWs3V1VGRGJFSXNhMEpCUVd0Q0xFVkJRVVVzU1VGQlNUdFpRVU40UWl4dFFrRkJiVUlzUlVGQlJTeERRVUZETzFsQlEzUkNMRTlCUVU4c1JVRkJSU3hOUVVGTk8xbEJRMllzVFVGQlRTeEZRVUZGTzJkQ1FVTktMRTFCUVUwc1JVRkJSU3hwUWtGQmFVSTdZVUZETlVJN1UwRkRTaXhEUVVGRExFTkJRVU03VVVGRlNDeHRRMEZCYlVNN1VVRkRia01zVFVGQlRUdEpRVU5XTEVOQlFVTTdTVUZEVEN4elFrRkJRenRCUVVGRUxFTkJRVU1zUVVGd1FrUXNTVUZ2UWtNN1FVRndRbGtzZFVKQlFXVXNhMEpCYjBJelFpeERRVUZCSW4wPVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZnJvbnRlbmQvYWRtaW5fdHMvY29udHJvbGxlcnMvQWRkRXhjaGFuZ2VGb3JtLnRzXG4vLyBtb2R1bGUgaWQgPSAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=